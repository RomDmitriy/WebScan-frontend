generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model repos {
  id       Int         @id
  owner_id Int
  status   repo_status @default(NotScanned)
  name     String
  users    users       @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  scans    scans[]
}

model scans {
  id                Int       @id @default(autoincrement())
  repo_id           Int
  scanned_time      DateTime  @default(now()) @db.Timestamp(6)
  low_severity      Int       @default(0)
  moderate_severity Int       @default(0)
  high_severity     Int       @default(0)
  repos             repos     @relation(fields: [repo_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sources           sources[]
}

model sources {
  id                Int                 @id @default(autoincrement())
  scan_id           Int
  path              String
  packagesInSources packagesInSources[]
  scan              scans               @relation(fields: [scan_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model packagesInSources {
  package_id Int
  source_id  Int
  package    packages @relation(fields: [package_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  source     sources  @relation(fields: [source_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([package_id, source_id])
}

model packages {
  id                Int                 @id @default(autoincrement())
  name              String
  version           String
  ecosystem         ecosystem
  packagesInSources packagesInSources[]
  vulnerabilities   vulnerabilities[]

  @@unique([name, ecosystem, version])
}

model vulnerabilities {
  id         String        @id
  modified   DateTime
  published  DateTime
  aliases    String[]
  summary    String
  details    String
  severity   severity_type
  package_id Int
  references references[]
  package    packages      @relation(fields: [package_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id    Int     @id
  email String  @unique @db.VarChar(64)
  repos repos[]
}

model references {
  id                 Int              @id @default(autoincrement())
  type               reference_type
  url                String
  vulnerabilities_id String?
  vulnerabilities    vulnerabilities? @relation(fields: [vulnerabilities_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([type, url])
}

enum repo_status {
  NotScanned
  Scanning
  Scanned
}

enum ecosystem {
  npm
  PyPI
}

enum severity_type {
  Low
  Moderate
  High
}

enum reference_type {
  ADVISORY
  ARTICLE
  DETECTION
  DISCUSSION
  REPORT
  FIX
  INTRODUCED
  PACKAGE
  EVIDENCE
  WEB
}
